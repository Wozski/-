{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["calculateWinner","squares","x","y","boardCoordinates","i","start","end","push","slice","currentPieces","checkLine","currentX","currentY","directionX","directionY","nextX","nextY","lineLength","App","status","useState","Array","fill","xIsNext","board","setBoard","block","handleClick","Math","floor","Square","props","className","onClick","value","winner","map","item","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+MAAe,SAASA,EAAgBC,EAASC,EAAGC,GAClD,GAAU,OAAND,GAAoB,OAANC,EAChB,OAAO,KAIT,IADA,IAAIC,EAAmB,GACdC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,IAAMC,EAAY,GAAJD,EACRE,EAAMD,EAAQ,GAEpBF,EAAiBI,KAAKP,EAAQQ,MAAMH,EAAOC,IAG7C,IAAMG,EAAgBN,EAAiBD,GAAGD,GAC1C,SAASS,EAAUC,EAAUC,EAAUC,EAAYC,GACjD,IAAIC,EAAQJ,EACRK,EAAQJ,EACRK,EAAa,EAEjB,EAAG,CAID,GAFAD,GAASF,KADTC,GAASF,IAIE,GACTE,EAAQ,IACRC,GAAS,GACTA,EAAQ,IACRb,EAAiBa,GAAOD,KAAWN,GAInC,MAFAQ,GAAc,QAITA,GACT,OAAOA,EAGT,OAEEP,EAAUT,EAAGC,EAAG,EAAG,GAAKQ,EAAUT,EAAGC,GAAI,EAAG,IAAM,GAElDQ,EAAUT,EAAGC,EAAG,EAAG,GAAKQ,EAAUT,EAAGC,EAAG,GAAI,IAAM,GAElDQ,EAAUT,EAAGC,EAAG,EAAG,GAAKQ,EAAUT,EAAGC,GAAI,GAAI,IAAM,GAEnDQ,EAAUT,EAAGC,EAAG,GAAI,GAAKQ,EAAUT,EAAGC,GAAI,EAAG,IAAM,EAE5CO,EAGF,KChDM,SAASS,IAAO,IAqCzBC,EArCwB,EACFC,mBAAS,CACjCpB,QAASqB,MAAM,KAASC,KAAK,MAC7BC,SAAS,EACTZ,SAAU,KACVC,SAAU,OALgB,mBACrBY,EADqB,KACdC,EADc,KAOtBC,EAAQL,MAAM,KAASC,KAAK,MAK5BK,EAAc,SAACvB,GAAO,IAClBJ,EAAgCwB,EAAhCxB,QAEJD,EAAgBC,EAFoBwB,EAAvBb,SAAuBa,EAAbZ,WAEyBZ,EAAQI,KAI5DJ,EAAQI,GAAKoB,EAAMD,QAAU,IAAM,IACnCE,EAAS,CACPzB,QAASA,EACTuB,SAAUC,EAAMD,QAChBZ,SAAUP,EAAI,GACdQ,SAAUgB,KAAKC,MAAMzB,EAAI,QAGvB0B,EAAS,SAACC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,OACL,qBAAKF,UAA2B,MAAhBD,EAAMG,MAAgB,QAAU,aAKlDC,EAASpC,EAAgByB,EAAMxB,QAASwB,EAAMb,SAAUa,EAAMZ,UAQpE,OALEO,EADEgB,EACO,WAAaA,EAEb,gBAAkBX,EAAMD,QAAU,IAAM,KAIjD,sBAAKS,UAAU,aAAf,UACE,qBAAKA,UAAU,SAAf,SAAyBb,IACzB,qBAAKa,UAAU,OAAf,oEACA,qBAAKA,UAAU,QAAf,SACE,qBAAKA,UAAU,cAAf,SACGN,EAAMU,KAAI,SAACC,EAAMC,GAAP,OACT,qBAAKN,UAAU,QAAf,UA1CY5B,EA0CyBkC,EAzCtC,cAACR,EAAD,CAAQI,MAAOV,EAAMxB,QAAQI,GAAI6B,QAAS,kBAAMN,EAAYvB,SADhD,IAACA,YCZxB,IAYemC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAEjDZ,M","file":"static/js/main.e0c28d1e.chunk.js","sourcesContent":["export default function calculateWinner(squares, x, y) {\n  if (x === null || y === null) {\n    return null;\n  }\n  // 轉化成二維陣列\n  let boardCoordinates = [];\n  for (let i = 0; i < 19; i += 1) {\n    const start = i * 19;\n    const end = start + 19;\n    // 檢查每一行的值，從 y 開始，之後 x\n    boardCoordinates.push(squares.slice(start, end));\n  }\n  // 取得當前顏色,並且會檢查上一步的棋顏色\n  const currentPieces = boardCoordinates[y][x];\n  function checkLine(currentX, currentY, directionX, directionY) {\n    let nextX = currentX;\n    let nextY = currentY;\n    let lineLength = 0;\n\n    do {\n      nextX += directionX;\n      nextY += directionY;\n      // 如果沒有條件 >= 0; < 19 條件，第一行和最後一行皆不可點擊，會出現 error，作用是檢查周圍是否有相同棋子。\n      if (\n        nextX >= 0 &&\n        nextX < 19 &&\n        nextY >= 0 &&\n        nextY < 19 &&\n        boardCoordinates[nextY][nextX] === currentPieces\n      ) {\n        lineLength += 1;\n      } else {\n        break;\n      }\n    } while (lineLength);\n    return lineLength;\n  }\n  // 計算不含自己有沒有超過四個子，自身不算，如果有連線，總數加一，最後到四即是五子連線。\n  if (\n    // 檢查前後\n    checkLine(x, y, 1, 0) + checkLine(x, y, -1, 0) >= 4 ||\n    // 檢查上下\n    checkLine(x, y, 0, 1) + checkLine(x, y, 0, -1) >= 4 ||\n    // 檢查右上左下斜角\n    checkLine(x, y, 1, 1) + checkLine(x, y, -1, -1) >= 4 ||\n    // 檢查左上右下斜角\n    checkLine(x, y, 1, -1) + checkLine(x, y, -1, 1) >= 4\n  ) {\n    return currentPieces;\n  }\n  //console.log(checkLine(x, y, 1, 0), checkLine(x, y, -1, 0));\n  return null;\n}\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport calculateWinner from \"./utils\";\nexport default function App() {\n  const [board, setBoard] = useState({\n    squares: Array(19 * 19).fill(null),\n    xIsNext: true,\n    currentX: null,\n    currentY: null,\n  });\n  const block = Array(19 * 19).fill(null);\n  // board.squares 子的顏色，一開始黑色為 true\n  const renderSquare = (i) => {\n    return <Square value={board.squares[i]} onClick={() => handleClick(i)} />;\n  };\n  const handleClick = (i) => {\n    const { squares, currentX, currentY } = board;\n    //防止重複下棋。\n    if (calculateWinner(squares, currentX, currentY) || squares[i]) {\n      return;\n    }\n    // squares[i] = 子的值，例如 B or W\n    squares[i] = board.xIsNext ? \"B\" : \"W\";\n    setBoard({\n      squares: squares,\n      xIsNext: !board.xIsNext,\n      currentX: i % 19,\n      currentY: Math.floor(i / 19),\n    });\n  };\n  const Square = (props) => {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value && (\n          <div className={props.value === \"B\" ? \"black\" : \"white\"}></div>\n        )}\n      </button>\n    );\n  };\n  const winner = calculateWinner(board.squares, board.currentX, board.currentY);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player:\" + (board.xIsNext ? \"B\" : \"W\");\n  }\n  //item = null, index = number\n  return (\n    <div className=\"game-board\">\n      <div className=\"status\">{status}</div>\n      <div className=\"word\">人生如棋，落子無悔</div>\n      <div className=\"board\">\n        <div className=\"board_block\">\n          {block.map((item, index) => (\n            <div className=\"block\">{renderSquare(index)}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nreportWebVitals();\n"],"sourceRoot":""}